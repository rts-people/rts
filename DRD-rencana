# Document Requirement Design (DRD)
## Sistem Rumah Singgah Pasien Anak

---

## 1. OVERVIEW PROJECT

### 1.1 Deskripsi Project
Sistem informasi berbasis web untuk mengelola operasional Rumah Singgah Pasien Anak dengan 3 jenis pengguna: Pengunjung/Donatur, Penghuni, dan Pengurus.

### 1.2 Teknologi yang Digunakan
- **Backend**: Laravel (PHP 8.1+)
- **Frontend**: Native HTML, CSS, JavaScript (dari repository existing)
- **Database**: MySQL 
- **Hosting**: Shared Hosting Hostinger
- **Integration**: WhatsApp API, Email SMTP

### 1.3 Target Pengguna
1. **Pengunjung/Donatur** - Akses publik tanpa registrasi
2. **Penghuni** - Orang tua/penanggung jawab pasien anak
3. **Pengurus** - 20 orang dengan role berbeda (pengamat, pengambil keputusan, driver, admin)

---

## 2. ANALISIS SISTEM

### 2.1 Functional Requirements

#### 2.1.1 Modul Pengunjung/Donatur
- Melihat berita dan artikel
- Statistik penghuni (jenis penyakit, asal, jenis kelamin)
- Company profile
- Form donasi tanpa registrasi
- Berlangganan email newsletter
- Konfirmasi donasi via WhatsApp & Email

#### 2.1.2 Modul Penghuni
- **Registrasi Check-in** (33 field + 9 dokumen foto)
- Login dengan Nomor Pasien + Password
- Dashboard informasi personal
- Melihat pengumuman dari pengurus
- Melihat jadwal piket
- Input histori berobat
- Membuat jadwal kunjungan RS (terhubung ke driver)
- Komunikasi dengan pengurus
- Proses check-out
- Lapor selesai tugas piket

#### 2.1.3 Modul Penghuni
- **Registrasi Check-in Bertahap** (3 step wizard + upload bertahap)
  - Step 1: Data Pasien & Penanggung Jawab
  - Step 2: Data Medis & Rujukan  
  - Step 3: Data Pendamping & Upload Dokumen
- Login dengan Nomor Pasien + Password
- Dashboard informasi personal
- **Notifikasi in-app** real-time
- Melihat pengumuman dari pengurus
- Melihat jadwal piket
- Input histori berobat
- Membuat jadwal kunjungan RS (terhubung ke driver)
- Komunikasi dengan pengurus
- Proses check-out
- Lapor selesai tugas piket

#### 2.1.4 Modul Pengurus
- Login multi-role (pengamat, pengambil keputusan, driver, admin)
- Dashboard statistik penghuni
- **Notifikasi in-app** untuk semua aktivitas
- Manajemen data penghuni
- Monitoring update pengobatan penghuni
- Manajemen kamar dan penempatan pasien
- Penjadwalan piket berdasarkan status aktif
- Laporan hasil piket
- Jadwal antar jemput (driver) berdasarkan kloter
- Komunikasi dengan penghuni via WhatsApp
- **CMS Berita** (khusus role admin):
  - Create, edit, delete berita
  - Upload gambar untuk berita
  - Publish/unpublish berita
  - SEO management (meta title, description)
  - Auto-notify subscribers saat publish
  - Preview sebelum publish

### 2.2 Non-Functional Requirements
- **Performance**: Load time < 3 detik pada shared hosting
- **Security**: Enkripsi data sensitif pasien (GDPR compliance)
- **Availability**: 99% uptime pada shared hosting
- **Scalability**: Mendukung hingga 100 penghuni aktif
- **Usability**: Mobile-responsive untuk semua user

---

## 3. ARSITEKTUR SISTEM

### 3.1 Arsitektur Aplikasi
```
Frontend (Native HTML/CSS/JS)
    ↓
Laravel API Layer
    ↓
Business Logic Layer
    ↓
Database Layer (MySQL)
    ↓
External Services (WhatsApp API, SMTP)
```

### 3.2 Struktur Folder Laravel
```
app/
├── Http/Controllers/
│   ├── PublicController.php
│   ├── PenghuniController.php
│   ├── PengurusController.php
│   ├── CMSController.php
│   ├── NotificationController.php
│   └── API/
├── Models/
│   ├── User.php
│   ├── Penghuni.php
│   ├── Pengurus.php
│   ├── Kamar.php
│   ├── Piket.php
│   ├── Donasi.php
│   ├── Berita.php
│   └── Notification.php
├── Services/
│   ├── WhatsAppService.php
│   ├── EmailService.php
│   ├── FileUploadService.php
│   ├── NotificationService.php
│   └── CMSService.php
└── Middleware/
    ├── PenghuniAuth.php
    ├── PengurusAuth.php
    └── AdminOnly.php
```

---

## 4. DATABASE DESIGN

### 4.1 Entity Relationship Diagram (ERD)

#### 4.1.1 Tabel Users (Pengurus)
```sql
CREATE TABLE users (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'pengamat', 'pengambil_keputusan', 'driver') NOT NULL,
    phone VARCHAR(20),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

#### 4.1.2 Tabel Penghuni (Pasien)
```sql
CREATE TABLE penghuni (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    nomor_pasien VARCHAR(20) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    
    -- Data Pasien
    nama_pasien VARCHAR(255) NOT NULL,
    jenis_kelamin_pasien ENUM('L', 'P') NOT NULL,
    tanggal_lahir_pasien DATE NOT NULL,
    nik_pasien VARCHAR(16) NOT NULL,
    alamat_pasien TEXT NOT NULL,
    nomor_hp_pasien VARCHAR(20),
    
    -- Data Penanggung Jawab
    nama_penanggung_jawab VARCHAR(255) NOT NULL,
    jenis_kelamin_pj ENUM('L', 'P') NOT NULL,
    tanggal_lahir_pj DATE NOT NULL,
    alamat_pj TEXT NOT NULL,
    nomor_hp_pj VARCHAR(20) NOT NULL,
    hubungan_dengan_pasien VARCHAR(100) NOT NULL,
    is_pendamping_1 BOOLEAN DEFAULT FALSE,
    
    -- Data Medis
    kategori_penyakit VARCHAR(255) NOT NULL,
    diagnosis_penyakit TEXT NOT NULL,
    penyakit_menular BOOLEAN DEFAULT FALSE,
    kelas_bpjs VARCHAR(10),
    rs_asal VARCHAR(255) NOT NULL,
    rs_tujuan VARCHAR(255) NOT NULL,
    pengobatan_rujukan TEXT NOT NULL,
    rts_tujuan VARCHAR(255),
    tanggal_masuk DATE,
    lama_tinggal INT,
    kondisi_khusus TEXT,
    
    -- Status
    status ENUM('pending', 'active', 'checkout') DEFAULT 'pending',
    kamar_id BIGINT,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (kamar_id) REFERENCES kamar(id)
);
```

#### 4.1.3 Tabel Pendamping
```sql
CREATE TABLE pendamping (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    penghuni_id BIGINT NOT NULL,
    jenis_pendamping ENUM('1', '2') NOT NULL,
    nama_lengkap VARCHAR(255) NOT NULL,
    jenis_kelamin ENUM('L', 'P') NOT NULL,
    tanggal_lahir DATE NOT NULL,
    alamat TEXT NOT NULL,
    nomor_hp VARCHAR(20) NOT NULL,
    hubungan_dengan_pasien VARCHAR(100) NOT NULL,
    penyakit_menular BOOLEAN DEFAULT FALSE,
    penyakit_mental BOOLEAN DEFAULT FALSE,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (penghuni_id) REFERENCES penghuni(id) ON DELETE CASCADE
);
```

#### 4.1.4 Tabel Dokumen
```sql
CREATE TABLE dokumen (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    penghuni_id BIGINT NOT NULL,
    jenis_dokumen ENUM('kk', 'bpjs', 'rujukan', 'rekam_medis', 'ktp_pj', 'ktp_p1', 'ktp_p2', 'foto_pasien', 'sktm') NOT NULL,
    nama_file VARCHAR(255) NOT NULL,
    path_file VARCHAR(500) NOT NULL,
    ukuran_file INT,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (penghuni_id) REFERENCES penghuni(id) ON DELETE CASCADE
);
```

#### 4.1.5 Tabel Kamar
```sql
CREATE TABLE kamar (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    nomor_kamar VARCHAR(10) NOT NULL,
    kapasitas INT NOT NULL DEFAULT 2,
    terisi INT NOT NULL DEFAULT 0,
    jenis_kamar ENUM('pasien_laki', 'pasien_perempuan', 'pendamping') NOT NULL,
    fasilitas TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

#### 4.1.6 Tabel Piket
```sql
CREATE TABLE piket (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    penghuni_id BIGINT NOT NULL,
    tanggal_piket DATE NOT NULL,
    jenis_piket VARCHAR(100) NOT NULL,
    status ENUM('scheduled', 'completed', 'skipped') DEFAULT 'scheduled',
    catatan TEXT,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (penghuni_id) REFERENCES penghuni(id)
);
```

#### 4.1.7 Tabel Histori Berobat
```sql
CREATE TABLE histori_berobat (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    penghuni_id BIGINT NOT NULL,
    tanggal_berobat DATE NOT NULL,
    rumah_sakit VARCHAR(255) NOT NULL,
    jenis_pengobatan VARCHAR(255) NOT NULL,
    hasil_pengobatan TEXT,
    catatan TEXT,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (penghuni_id) REFERENCES penghuni(id)
);
```

#### 4.1.8 Tabel Jadwal Kunjungan
```sql
CREATE TABLE jadwal_kunjungan (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    penghuni_id BIGINT NOT NULL,
    driver_id BIGINT,
    tanggal_kunjungan DATE NOT NULL,
    waktu_berangkat TIME NOT NULL,
    rumah_sakit VARCHAR(255) NOT NULL,
    keperluan TEXT NOT NULL,
    status ENUM('pending', 'approved', 'on_progress', 'completed', 'cancelled') DEFAULT 'pending',
    kloter VARCHAR(10),
    catatan TEXT,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (penghuni_id) REFERENCES penghuni(id),
    FOREIGN KEY (driver_id) REFERENCES users(id)
);
```

#### 4.1.9 Tabel Donasi
```sql
CREATE TABLE donasi (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    nama_donatur VARCHAR(255) NOT NULL,
    email_donatur VARCHAR(255),
    nomor_hp_donatur VARCHAR(20),
    jumlah_donasi DECIMAL(15,2) NOT NULL,
    jenis_donasi ENUM('uang', 'barang') NOT NULL,
    deskripsi_donasi TEXT,
    status ENUM('pending', 'confirmed', 'received') DEFAULT 'pending',
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP
);
```

#### 4.1.10 Tabel Berita
```sql
CREATE TABLE berita (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    judul VARCHAR(255) NOT NULL,
    slug VARCHAR(255) UNIQUE NOT NULL,
    konten LONGTEXT NOT NULL,
    gambar_utama VARCHAR(500),
    excerpt TEXT,
    status ENUM('draft', 'published') DEFAULT 'draft',
    author_id BIGINT NOT NULL,
    views INT DEFAULT 0,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (author_id) REFERENCES users(id)
);
```

#### 4.1.11 Tabel Notifications
```sql
CREATE TABLE notifications (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    user_id BIGINT NOT NULL,
    user_type ENUM('penghuni', 'pengurus') NOT NULL,
    title VARCHAR(255) NOT NULL,
    message TEXT NOT NULL,
    type ENUM('info', 'warning', 'success', 'danger') DEFAULT 'info',
    action_url VARCHAR(500),
    is_read BOOLEAN DEFAULT FALSE,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    INDEX idx_user_notifications (user_id, user_type, is_read),
    INDEX idx_created_at (created_at)
);
```

#### 4.1.12 Tabel Registration Steps (untuk upload bertahap)
```sql
CREATE TABLE registration_steps (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    session_id VARCHAR(255) NOT NULL,
    penghuni_id BIGINT,
    current_step INT DEFAULT 1,
    step_1_completed BOOLEAN DEFAULT FALSE,
    step_2_completed BOOLEAN DEFAULT FALSE,
    step_3_completed BOOLEAN DEFAULT FALSE,
    temp_data JSON,
    expires_at TIMESTAMP,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (penghuni_id) REFERENCES penghuni(id) ON DELETE CASCADE,
    INDEX idx_session (session_id),
    INDEX idx_expires (expires_at)
);
```

#### 4.1.13 Tabel Berita (Updated dengan SEO)
```sql
CREATE TABLE berita (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    judul VARCHAR(255) NOT NULL,
    slug VARCHAR(255) UNIQUE NOT NULL,
    konten LONGTEXT NOT NULL,
    excerpt TEXT,
    gambar_utama VARCHAR(500),
    gambar_gallery JSON, -- Multiple images
    
    -- SEO Fields
    meta_title VARCHAR(255),
    meta_description TEXT,
    meta_keywords VARCHAR(500),
    
    -- Publishing
    status ENUM('draft', 'published', 'scheduled') DEFAULT 'draft',
    published_at TIMESTAMP NULL,
    scheduled_at TIMESTAMP NULL,
    
    -- Author & Stats
    author_id BIGINT NOT NULL,
    views INT DEFAULT 0,
    featured BOOLEAN DEFAULT FALSE,
    allow_comments BOOLEAN DEFAULT TRUE,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    FOREIGN KEY (author_id) REFERENCES users(id),
    INDEX idx_status_published (status, published_at),
    INDEX idx_featured (featured),
    FULLTEXT(judul, konten, excerpt)
);
```

#### 4.1.14 Tabel Newsletter Subscribers (Updated)
```sql
CREATE TABLE newsletter_subscribers (
    id BIGINT PRIMARY KEY AUTO_INCREMENT,
    email VARCHAR(255) UNIQUE NOT NULL,
    name VARCHAR(255),
    is_active BOOLEAN DEFAULT TRUE,
    preferences JSON, -- Preference jenis berita
    last_sent_at TIMESTAMP NULL,
    
    created_at TIMESTAMP,
    updated_at TIMESTAMP,
    
    INDEX idx_active_subscribers (is_active, created_at)
);
```

---

## 5. API ENDPOINTS

### 5.1 Public API (Pengunjung/Donatur)
```
GET    /api/berita                    - List berita published
GET    /api/berita/{slug}             - Detail berita
GET    /api/statistik                 - Statistik penghuni (anonymous)
POST   /api/donasi                    - Submit donasi
POST   /api/newsletter/subscribe      - Subscribe newsletter
GET    /api/company-profile           - Info company profile
```

### 5.2 Penghuni API
```
POST   /api/penghuni/register/step1    - Step 1: Data Pasien & PJ
POST   /api/penghuni/register/step2    - Step 2: Data Medis
POST   /api/penghuni/register/step3    - Step 3: Data Pendamping
POST   /api/penghuni/register/upload   - Upload dokumen bertahap
POST   /api/penghuni/register/submit   - Submit final registrasi
GET    /api/penghuni/register/status   - Cek status registrasi
POST   /api/penghuni/login             - Login penghuni
GET    /api/penghuni/dashboard         - Dashboard data
GET    /api/penghuni/profile           - Profile lengkap
GET    /api/penghuni/notifications     - Notifikasi in-app
PUT    /api/penghuni/notifications/{id}/read - Mark notification as read
GET    /api/penghuni/pengumuman        - List pengumuman
GET    /api/penghuni/piket             - Jadwal piket
POST   /api/penghuni/histori-berobat   - Input histori berobat
POST   /api/penghuni/jadwal-kunjungan  - Request jadwal kunjungan
POST   /api/penghuni/lapor-piket       - Lapor selesai piket
POST   /api/penghuni/checkout          - Proses checkout
```

### 5.3 Pengurus API
```
POST   /api/pengurus/login             - Login pengurus
GET    /api/pengurus/dashboard         - Dashboard statistik
GET    /api/pengurus/notifications     - Notifikasi in-app
PUT    /api/pengurus/notifications/{id}/read - Mark notification as read
GET    /api/pengurus/penghuni          - List semua penghuni
GET    /api/pengurus/penghuni/{id}     - Detail penghuni
PUT    /api/pengurus/penghuni/{id}     - Update data penghuni
GET    /api/pengurus/kamar             - Manajemen kamar
POST   /api/pengurus/assign-kamar      - Assign penghuni ke kamar
GET    /api/pengurus/piket             - Manajemen piket
POST   /api/pengurus/create-piket      - Buat jadwal piket
GET    /api/pengurus/jadwal-kunjungan  - List jadwal kunjungan
PUT    /api/pengurus/approve-kunjungan - Approve jadwal kunjungan
POST   /api/pengurus/send-whatsapp     - Kirim pesan WhatsApp
```

### 5.4 CMS API (Admin Only)
```
GET    /api/cms/berita                 - List semua berita (draft/published)
GET    /api/cms/berita/{id}            - Detail berita untuk edit
POST   /api/cms/berita                 - Create berita baru
PUT    /api/cms/berita/{id}            - Update berita
DELETE /api/cms/berita/{id}            - Delete berita
POST   /api/cms/berita/{id}/publish    - Publish berita
POST   /api/cms/berita/{id}/unpublish  - Unpublish berita
POST   /api/cms/berita/{id}/schedule   - Schedule publish berita
POST   /api/cms/upload-image           - Upload gambar untuk berita
GET    /api/cms/media                  - Media library
DELETE /api/cms/media/{id}             - Delete media
GET    /api/cms/analytics              - Berita analytics (views, etc)
```

### 5.5 Notification API
```
GET    /api/notifications              - Get user notifications
POST   /api/notifications/mark-read    - Mark multiple as read
GET    /api/notifications/count        - Unread count
POST   /api/notifications/send         - Send notification (admin)
```

---

## 6. WORKFLOW SISTEM

### 6.1 Workflow Registrasi Penghuni (Bertahap)
**Step 1: Data Dasar Pasien & Penanggung Jawab**
1. Penghuni mengisi data pasien (nama, NIK, alamat, dll)
2. Data penanggung jawab dan hubungan keluarga
3. Sistem simpan di `registration_steps` table sebagai temp data
4. Generate session ID untuk tracking progress

**Step 2: Data Medis & Rujukan**
1. Input kategori penyakit dan diagnosis detail
2. Data BPJS, RS asal, RS tujuan
3. Rencana pengobatan dan kondisi khusus
4. Update progress di database temp

**Step 3: Data Pendamping & Upload Dokumen**
1. Input data pendamping 1 & 2 (opsional)
2. Upload dokumen bertahap dengan progress bar:
   - KK, BPJS, Surat Rujukan (wajib)
   - Rekam medis, KTP-KTP (wajib)
   - Foto pasien, SKTM (wajib)
3. Validasi semua dokumen ter-upload
4. Generate Nomor Pasien otomatis & set password
5. Transfer data temp ke tabel penghuni
6. Status "pending" menunggu approval pengurus
7. **Auto-notify pengurus** via in-app notification
8. Konfirmasi registrasi via WhatsApp & Email

**Approval Process:**
1. Pengurus review data via dashboard
2. Approve/reject dengan catatan
3. Jika approve: assign kamar + status "active"
4. **In-app notification** ke penghuni tentang hasil approval

### 6.2 Workflow CMS Berita
**Create & Publish Berita:**
1. Admin login ke CMS dashboard
2. Create berita baru dengan rich text editor
3. Upload gambar utama + gallery images
4. Set SEO meta (title, description, keywords)
5. Pilih status: Draft / Publish Now / Schedule Publish
6. Preview sebelum publish
7. Saat publish: **auto-notify newsletter subscribers**
8. Berita tampil di homepage public secara otomatis

**Auto-Update Homepage:**
1. Homepage menampilkan 3 berita terbaru dengan featured image
2. Real-time update saat ada berita baru dipublish
3. SEO-friendly URLs dengan slug
4. Breadcrumb navigation untuk detail berita

### 6.3 Workflow Notifikasi In-App
**Real-time Notifications:**
1. Sistem generate notifikasi untuk berbagai event:
   - Penghuni: approval status, jadwal piket, reminder
   - Pengurus: registrasi baru, request kunjungan, laporan piket
2. Notifikasi tersimpan di database dengan status unread
3. Real-time push via WebSocket/Server-Sent Events
4. Badge counter di navigation bar
5. Mark as read individual atau bulk
6. Auto-cleanup notifikasi lama (>30 hari)

### 6.2 Workflow Jadwal Kunjungan
1. Penghuni request jadwal kunjungan via dashboard
2. Sistem mengirim notifikasi ke pengurus (driver)
3. Driver approve dan set kloter
4. Sistem update status dan notifikasi penghuni
5. Driver pickup sesuai jadwal
6. Update status "on_progress" → "completed"

### 6.3 Workflow Donasi
1. Visitor mengisi form donasi tanpa registrasi
2. Sistem generate kode donasi unik
3. Kirim konfirmasi via WhatsApp & Email
4. Include instruksi transfer/delivery (jika barang)
5. Pengurus konfirmasi penerimaan donasi
6. Update status donasi

---

## 7. SECURITY CONSIDERATIONS

### 7.1 Data Protection
- Enkripsi data sensitif (NIK, nomor HP, data medis)
- Hash password menggunakan bcrypt
- Validasi file upload (type, size, virus scan)
- Sanitasi input untuk mencegah XSS/SQL Injection

### 7.2 Authentication & Authorization
- JWT token untuk API authentication
- Role-based access control (RBAC)
- Session timeout untuk keamanan
- Rate limiting untuk mencegah brute force

### 7.3 File Upload Security
- Validasi ekstensi file yang diizinkan (.jpg, .jpeg, .png, .pdf)
- Maksimal ukuran file 5MB per dokumen
- Rename file dengan hash untuk mencegah direct access
- Store di folder non-public dengan proper permissions

---

## 8. INTEGRATION SERVICES

### 8.1 WhatsApp API Integration
```php
// WhatsAppService.php
class WhatsAppService
{
    public function sendMessage($phone, $message)
    {
        // Integration dengan WhatsApp Business API
        // Atau alternatif: Twilio, Vonage, dll
    }
    
    public function sendDonationConfirmation($phone, $donationData) {}
    public function sendCheckInNotification($phone, $penghuniData) {}
    public function sendScheduleReminder($phone, $scheduleData) {}
}
```

### 8.3 Real-time Notification Service
```php
// NotificationService.php
class NotificationService
{
    public function sendToUser($userId, $userType, $title, $message, $type = 'info', $actionUrl = null)
    {
        // Save to database
        $notification = Notification::create([
            'user_id' => $userId,
            'user_type' => $userType,
            'title' => $title,
            'message' => $message,
            'type' => $type,
            'action_url' => $actionUrl
        ]);
        
        // Send real-time via WebSocket/SSE
        $this->broadcastNotification($notification);
        
        return $notification;
    }
    
    public function notifyNewRegistration($penghuniData) 
    {
        // Notify all pengurus about new registration
        $pengurus = User::where('role', '!=', 'admin')->get();
        foreach ($pengurus as $user) {
            $this->sendToUser(
                $user->id, 
                'pengurus',
                'Pendaftaran Baru',
                "Penghuni baru: {$penghuniData['nama_pasien']} menunggu approval",
                'info',
                "/pengurus/penghuni/{$penghuniData['id']}"
            );
        }
    }
    
    public function notifyApprovalResult($penghuniId, $approved, $notes = null) {}
    public function notifyPiketReminder($penghuniId, $piketData) {}
    public function notifyScheduleRequest($driverId, $scheduleData) {}
}
```

### 8.4 CMS Service
```php
// CMSService.php
class CMSService
{
    public function publishBerita($beritaId)
    {
        $berita = Berita::findOrFail($beritaId);
        $berita->update([
            'status' => 'published',
            'published_at' => now()
        ]);
        
        // Auto-notify newsletter subscribers
        $this->notifySubscribers($berita);
        
        // Update homepage cache
        $this->updateHomepageCache();
        
        return $berita;
    }
    
    public function scheduleBerita($beritaId, $scheduledAt)
    {
        $berita = Berita::findOrFail($beritaId);
        $berita->update([
            'status' => 'scheduled',
            'scheduled_at' => $scheduledAt
        ]);
        
        // Add to queue for scheduled publishing
        PublishScheduledBerita::dispatch($berita)->delay($scheduledAt);
        
        return $berita;
    }
    
    private function notifySubscribers($berita)
    {
        $subscribers = NewsletterSubscriber::where('is_active', true)->get();
        foreach ($subscribers as $subscriber) {
            SendNewsletterEmail::dispatch($subscriber, $berita);
        }
    }
    
    public function getBeritaForHomepage($limit = 3)
    {
        return Berita::where('status', 'published')
                    ->orderBy('featured', 'DESC')
                    ->orderBy('published_at', 'DESC')
                    ->limit($limit)
                    ->get();
    }
}
```

---

## 9. DEPLOYMENT PLAN

### 9.1 Shared Hosting Setup (Hostinger)
1. **Domain & SSL**: Setup domain dengan SSL certificate
2. **Database**: Create MySQL database dan user
3. **File Structure**: Upload Laravel files ke public_html
4. **Environment**: Configure .env untuk production
5. **Cron Jobs**: Setup untuk queue jobs dan scheduled tasks

### 9.2 Environment Configuration
```env
APP_NAME="Rumah Singgah Pasien Anak"
APP_ENV=production
APP_KEY=base64:...
APP_DEBUG=false
APP_URL=https://yourdomai n.com

DB_CONNECTION=mysql
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=your_db_name
DB_USERNAME=your_db_user
DB_PASSWORD=your_db_password

MAIL_MAILER=smtp
MAIL_HOST=smtp.hostinger.com
MAIL_PORT=587
MAIL_USERNAME=your_email
MAIL_PASSWORD=your_password

WHATSAPP_API_KEY=your_whatsapp_api_key
WHATSAPP_API_URL=https://api.whatsapp.com/
```

### 9.3 Performance Optimization
- **Caching**: Redis/Memcached untuk session dan cache
- **CDN**: CloudFlare untuk static assets
- **Image Optimization**: Compress uploaded images
- **Database Indexing**: Proper indexing untuk query performance

---

## 10. TESTING STRATEGY

### 10.1 Unit Testing
- Model validation testing
- Service class testing
- API endpoint testing

### 10.2 Integration Testing
- WhatsApp API integration
- Email service integration
- File upload functionality

### 10.3 User Acceptance Testing
- Test dengan pengurus untuk workflow approval
- Test dengan sample penghuni untuk registrasi
- Test performa dengan data dummy

---

## 11. MAINTENANCE PLAN

### 11.1 Regular Maintenance
- Daily: Database backup
- Weekly: Log file cleanup
- Monthly: Performance monitoring
- Quarterly: Security audit

### 11.2 Monitoring
- Server uptime monitoring
- Database performance monitoring
- API response time monitoring
- Error logging dan alerting

---

## 12. TIMELINE ESTIMASI

### Phase 1: Core Development (5-7 minggu)
- Setup Laravel dan database schema lengkap
- Implementasi authentication system multi-role
- **Step-by-step registration system** dengan temp storage
- CRUD basic untuk semua entitas
- **Real-time notification system** (WebSocket/SSE)
- Integration WhatsApp & Email basic

### Phase 2: Advanced Features (4-5 minggu)
- **File upload system bertahap** dengan progress tracking
- **CMS berita lengkap** dengan rich text editor
- Complex workflow (approval, assignment, scheduling)
- Dashboard dan reporting dengan charts
- **In-app notification** real-time di frontend
- **Auto-publish homepage** saat ada berita baru

### Phase 3: Frontend Integration (3-4 minggu)
- Integration existing frontend dengan Laravel API
- **Responsive notification UI** dengan badge counter
- **CMS interface** untuk admin kelola berita
- **Registration wizard UI** yang user-friendly
- Mobile optimization untuk semua fitur

### Phase 4: Testing & Deployment (2-3 minggu)
- Unit testing dan integration testing
- User acceptance testing dengan real data
- Performance optimization (caching, indexing)
- Production deployment dengan monitoring

### Phase 5: Post-Launch Support (ongoing)
- Real-time monitoring dan maintenance
- User training untuk pengurus
- Feature enhancement berdasarkan feedback
- **Content management training** untuk admin

---

## 13. CATATAN TAMBAHAN

### 13.1 Saran Improvement
1. **Progressive Web App (PWA)**: Untuk better mobile experience + offline capability
2. **Real-time Chat System**: Direct chat antara penghuni dan pengurus
3. **Push Notifications**: Browser push notifications untuk desktop
4. **Advanced Analytics**: Dashboard analytics untuk website traffic dan user behavior
5. **Multi-language Support**: Bahasa daerah untuk penghuni dari berbagai wilayah
6. **QR Code Integration**: QR code untuk check-in/check-out yang lebih cepat
7. **Automated Reporting**: Auto-generate laporan bulanan untuk stakeholder
8. **Mobile App**: Native mobile app untuk better user experience

### 13.2 Technical Enhancements
1. **Caching Strategy**: Redis untuk session, cache berita, dan query optimization
2. **Image Optimization**: Auto-compress dan resize uploaded images
3. **SEO Optimization**: Full SEO untuk halaman berita dan company profile
4. **API Rate Limiting**: Prevent abuse dengan rate limiting per user
5. **Audit Trail**: Log semua aktivitas penting untuk compliance
6. **Database Indexing**: Optimize query performance dengan proper indexing
7. **Content Delivery Network**: CloudFlare atau AWS CloudFront untuk static assets
8. **Backup Automation**: Daily automated backup ke cloud storage

### 13.3 User Experience Improvements
1. **Dark Mode**: Option dark/light mode untuk better accessibility
2. **Keyboard Shortcuts**: Shortcuts untuk power users (pengurus)
3. **Bulk Operations**: Bulk actions untuk manajemen data yang lebih efisien
4. **Advanced Search**: Full-text search untuk berita dan data penghuni
5. **Export Functions**: Export data ke Excel/PDF untuk reporting
6. **Calendar Integration**: Sync jadwal dengan Google Calendar
7. **Drag & Drop**: Drag & drop untuk upload dokumen dan manage assignments
8. **Real-time Collaboration**: Multiple pengurus bisa edit data bersamaan

### 13.2 Scalability Considerations
- Jika penghuni > 100: Consider VPS upgrade
- Implement queue system untuk heavy operations
- Database partitioning untuk historical data
- CDN untuk file/image serving

### 13.3 Compliance
- GDPR compliance untuk data protection
- Healthcare data privacy regulations
- Regular security auditing
- Data retention policy

---

**Dokumen ini adalah living document yang akan diupdate sesuai kebutuhan dan feedback selama development process.**
